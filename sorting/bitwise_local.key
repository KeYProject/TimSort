\rules {

  copyInAntec {
    \schemaVar \formula b;
    
    \find(b ==>)
    \replacewith(b ==>)
    \addrules (
      insertCopy {
        \add(b ==>)
        }
     )
  };

  weakenSubInAntec {
    \schemaVar \formula b;
    
    \find(b)
    \antecedentPolarity
    \replacewith(true)    
  };

  weakenSubInSucc {
    \schemaVar \formula b;
    
    \find(b)
    \succedentPolarity
    \replacewith(false)    
  };


  do2while {
      \schemaVar  \modalOperator
           { diamond, box, diamond_transaction, box_transaction } #allmodal;
      \schemaVar \program JavaBooleanExpression #bexp;
      \schemaVar \program Statement #s;
      \schemaVar \program Variable #firstIt;
      \schemaVar \formula post;

      \find (\modality{#allmodal}{.. do #s while ( #bexp ); ...}\endmodality(post))
      \varcond (\new(#firstIt, boolean))
      \replacewith (\modality{#allmodal}{..
                         boolean #firstIt; #firstIt = true;
	      	    #reattachLoopInvariant ( while (#firstIt || #bexp) { #firstIt = false; #s } ); ...}\endmodality(post))
  };

}
